{"version":3,"file":"ngx-webcam.umd.js","sources":["../esm2015/src/app/modules/src/app/modules/webcam/domain/webcam-image.ts","../esm2015/src/app/modules/src/app/modules/webcam/util/webcam.util.ts","../esm2015/src/app/modules/src/app/modules/webcam/webcam/webcam.component.ts","../esm2015/src/app/src/app/modules/webcam/webcam.module.ts","../esm2015/src/app/modules/src/app/modules/webcam/domain/webcam-init-error.ts","../esm2015/src/app/modules/src/app/modules/webcam/domain/webcam-mirror-properties.ts","../../ngx-webcam.ts"],"names":["EventEmitter","Component","Input","Output","ViewChild","NgModule","CommonModule"],"mappings":"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","sourcesContent":["/**\r\n * Container class for a captured webcam image\r\n * @author basst314, davidshen84\r\n */\r\nexport class WebcamImage {\r\n\r\n  public constructor(imageAsDataUrl: string, mimeType: string, imageData: ImageData) {\r\n    this._mimeType = mimeType;\r\n    this._imageAsDataUrl = imageAsDataUrl;\r\n    this._imageData = imageData;\r\n  }\r\n\r\n  private readonly _mimeType: string = null;\r\n  private _imageAsBase64: string = null;\r\n  private readonly _imageAsDataUrl: string = null;\r\n  private readonly _imageData: ImageData = null;\r\n\r\n\r\n  /**\r\n   * Extracts the Base64 data out of the given dataUrl.\r\n   * @param dataUrl the given dataUrl\r\n   * @param mimeType the mimeType of the data\r\n   */\r\n  private static getDataFromDataUrl(dataUrl: string, mimeType: string) {\r\n    return dataUrl.replace(`data:${mimeType};base64,`, '');\r\n  }\r\n\r\n  /**\r\n   * Get the base64 encoded image data\r\n   * @returns base64 data of the image\r\n   */\r\n  public get imageAsBase64(): string {\r\n    return this._imageAsBase64 ? this._imageAsBase64\r\n      : this._imageAsBase64 = WebcamImage.getDataFromDataUrl(this._imageAsDataUrl, this._mimeType);\r\n  }\r\n\r\n  /**\r\n   * Get the encoded image as dataUrl\r\n   * @returns the dataUrl of the image\r\n   */\r\n  public get imageAsDataUrl(): string {\r\n    return this._imageAsDataUrl;\r\n  }\r\n\r\n  /**\r\n   * Get the ImageData object associated with the canvas' 2d context.\r\n   * @returns the ImageData of the canvas's 2d context.\r\n   */\r\n  public get imageData(): ImageData {\r\n    return this._imageData;\r\n  }\r\n\r\n}\r\n","export class WebcamUtil {\r\n\r\n  /**\r\n   * Lists available videoInput devices\r\n   * @returns a list of media device info.\r\n   */\r\n  public static getAvailableVideoInputs(): Promise<MediaDeviceInfo[]> {\r\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n      return Promise.reject('enumerateDevices() not supported.');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      navigator.mediaDevices.enumerateDevices()\r\n        .then((devices: MediaDeviceInfo[]) => {\r\n          resolve(devices.filter((device: MediaDeviceInfo) => device.kind === 'videoinput'));\r\n        })\r\n        .catch(err => {\r\n          reject(err.message || err);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\r\nimport {WebcamInitError} from '../domain/webcam-init-error';\r\nimport {WebcamImage} from '../domain/webcam-image';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {WebcamUtil} from '../util/webcam.util';\r\nimport {WebcamMirrorProperties} from '../domain/webcam-mirror-properties';\r\n\r\n@Component({\r\n  selector: 'webcam',\r\n  templateUrl: './webcam.component.html',\r\n  styleUrls: ['./webcam.component.scss']\r\n})\r\nexport class WebcamComponent implements AfterViewInit, OnDestroy {\r\n  private static DEFAULT_VIDEO_OPTIONS: MediaTrackConstraints = {facingMode: 'environment'};\r\n  private static DEFAULT_IMAGE_TYPE: string = 'image/jpeg';\r\n  private static DEFAULT_IMAGE_QUALITY: number = 0.92;\r\n\r\n  /** Defines the max width of the webcam area in px */\r\n  @Input() public width: number = 640;\r\n  /** Defines the max height of the webcam area in px */\r\n  @Input() public height: number = 480;\r\n  /** Defines base constraints to apply when requesting video track from UserMedia */\r\n  @Input() public videoOptions: MediaTrackConstraints = WebcamComponent.DEFAULT_VIDEO_OPTIONS;\r\n  /** Flag to enable/disable camera switch. If enabled, a switch icon will be displayed if multiple cameras were found */\r\n  @Input() public allowCameraSwitch: boolean = true;\r\n  /** Parameter to control image mirroring (i.e. for user-facing camera). [\"auto\", \"always\", \"never\"] */\r\n  @Input() public mirrorImage: string | WebcamMirrorProperties;\r\n  /** Flag to control whether an ImageData object is stored into the WebcamImage object. */\r\n  @Input() public captureImageData: boolean = false;\r\n  /** The image type to use when capturing snapshots */\r\n  @Input() public imageType: string = WebcamComponent.DEFAULT_IMAGE_TYPE;\r\n  /** The image quality to use when capturing snapshots (number between 0 and 1) */\r\n  @Input() public imageQuality: number = WebcamComponent.DEFAULT_IMAGE_QUALITY;\r\n\r\n  /** EventEmitter which fires when an image has been captured */\r\n  @Output() public imageCapture: EventEmitter<WebcamImage> = new EventEmitter<WebcamImage>();\r\n  /** Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions) */\r\n  @Output() public initError: EventEmitter<WebcamInitError> = new EventEmitter<WebcamInitError>();\r\n  /** Emits when the webcam video was clicked */\r\n  @Output() public imageClick: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Emits the active deviceId after the active video device was switched */\r\n  @Output() public cameraSwitched: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  /** available video devices */\r\n  public availableVideoInputs: MediaDeviceInfo[] = [];\r\n\r\n  /** Indicates whether the video device is ready to be switched */\r\n  public videoInitialized: boolean = false;\r\n\r\n  /** If the Observable represented by this subscription emits, an image will be captured and emitted through\r\n   * the 'imageCapture' EventEmitter */\r\n  private triggerSubscription: Subscription;\r\n  /** Index of active video in availableVideoInputs */\r\n  private activeVideoInputIndex: number = -1;\r\n  /** Subscription to switchCamera events */\r\n  private switchCameraSubscription: Subscription;\r\n  /** MediaStream object in use for streaming UserMedia data */\r\n  private mediaStream: MediaStream = null;\r\n  @ViewChild('video', { static: true }) private video: any;\r\n  /** Canvas for Video Snapshots */\r\n  @ViewChild('canvas', { static: true }) private canvas: any;\r\n\r\n  /** width and height of the active video stream */\r\n  private activeVideoSettings: MediaTrackSettings = null;\r\n\r\n  /**\r\n   * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\r\n   */\r\n  @Input()\r\n  public set trigger(trigger: Observable<void>) {\r\n    if (this.triggerSubscription) {\r\n      this.triggerSubscription.unsubscribe();\r\n    }\r\n\r\n    // Subscribe to events from this Observable to take snapshots\r\n    this.triggerSubscription = trigger.subscribe(() => {\r\n      this.takeSnapshot();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If the given Observable emits, the active webcam will be switched to the one indicated by the emitted value.\r\n   * @param switchCamera Indicates which webcam to switch to\r\n   *   true: cycle forwards through available webcams\r\n   *   false: cycle backwards through available webcams\r\n   *   string: activate the webcam with the given id\r\n   */\r\n  @Input()\r\n  public set switchCamera(switchCamera: Observable<boolean | string>) {\r\n    if (this.switchCameraSubscription) {\r\n      this.switchCameraSubscription.unsubscribe();\r\n    }\r\n\r\n    // Subscribe to events from this Observable to switch video device\r\n    this.switchCameraSubscription = switchCamera.subscribe((value: boolean | string) => {\r\n      if (typeof value === 'string') {\r\n        // deviceId was specified\r\n        this.switchToVideoInput(value);\r\n      } else {\r\n        // direction was specified\r\n        this.rotateVideoInput(value !== false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get MediaTrackConstraints to request streaming the given device\r\n   * @param deviceId\r\n   * @param baseMediaTrackConstraints base constraints to merge deviceId-constraint into\r\n   * @returns\r\n   */\r\n  private static getMediaConstraintsForDevice(deviceId: string, baseMediaTrackConstraints: MediaTrackConstraints): MediaTrackConstraints {\r\n    const result: MediaTrackConstraints = baseMediaTrackConstraints ? baseMediaTrackConstraints : this.DEFAULT_VIDEO_OPTIONS;\r\n    if (deviceId) {\r\n      result.deviceId = {exact: deviceId};\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Tries to harvest the deviceId from the given mediaStreamTrack object.\r\n   * Browsers populate this object differently; this method tries some different approaches\r\n   * to read the id.\r\n   * @param mediaStreamTrack\r\n   * @returns deviceId if found in the mediaStreamTrack\r\n   */\r\n  private static getDeviceIdFromMediaStreamTrack(mediaStreamTrack: MediaStreamTrack): string {\r\n    if (mediaStreamTrack.getSettings && mediaStreamTrack.getSettings() && mediaStreamTrack.getSettings().deviceId) {\r\n      return mediaStreamTrack.getSettings().deviceId;\r\n    } else if (mediaStreamTrack.getConstraints && mediaStreamTrack.getConstraints() && mediaStreamTrack.getConstraints().deviceId) {\r\n      const deviceIdObj: ConstrainDOMString = mediaStreamTrack.getConstraints().deviceId;\r\n      return WebcamComponent.getValueFromConstrainDOMString(deviceIdObj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tries to harvest the facingMode from the given mediaStreamTrack object.\r\n   * Browsers populate this object differently; this method tries some different approaches\r\n   * to read the value.\r\n   * @param mediaStreamTrack\r\n   * @returns facingMode if found in the mediaStreamTrack\r\n   */\r\n  private static getFacingModeFromMediaStreamTrack(mediaStreamTrack: MediaStreamTrack): string {\r\n    if (mediaStreamTrack) {\r\n      if (mediaStreamTrack.getSettings && mediaStreamTrack.getSettings() && mediaStreamTrack.getSettings().facingMode) {\r\n        return mediaStreamTrack.getSettings().facingMode;\r\n      } else if (mediaStreamTrack.getConstraints && mediaStreamTrack.getConstraints() && mediaStreamTrack.getConstraints().facingMode) {\r\n        const facingModeConstraint: ConstrainDOMString = mediaStreamTrack.getConstraints().facingMode;\r\n        return WebcamComponent.getValueFromConstrainDOMString(facingModeConstraint);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines whether the given mediaStreamTrack claims itself as user facing\r\n   * @param mediaStreamTrack\r\n   */\r\n  private static isUserFacing(mediaStreamTrack: MediaStreamTrack): boolean {\r\n    const facingMode: string = WebcamComponent.getFacingModeFromMediaStreamTrack(mediaStreamTrack);\r\n    return facingMode ? 'user' === facingMode.toLowerCase() : false;\r\n  }\r\n\r\n  /**\r\n   * Extracts the value from the given ConstrainDOMString\r\n   * @param constrainDOMString\r\n   */\r\n  private static getValueFromConstrainDOMString(constrainDOMString: ConstrainDOMString): string {\r\n    if (constrainDOMString) {\r\n      if (constrainDOMString instanceof String) {\r\n        return String(constrainDOMString);\r\n      } else if (Array.isArray(constrainDOMString) && Array(constrainDOMString).length > 0) {\r\n        return String(constrainDOMString[0]);\r\n      } else if (typeof constrainDOMString === 'object') {\r\n        if (constrainDOMString['exact']) {\r\n          return String(constrainDOMString['exact']);\r\n        } else if (constrainDOMString['ideal']) {\r\n          return String(constrainDOMString['ideal']);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.detectAvailableDevices()\r\n      .then(() => {\r\n        // start video\r\n        this.switchToVideoInput(null);\r\n      })\r\n      .catch((err: string) => {\r\n        this.initError.next(<WebcamInitError>{message: err});\r\n        // fallback: still try to load webcam, even if device enumeration failed\r\n        this.switchToVideoInput(null);\r\n      });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.stopMediaTracks();\r\n    this.unsubscribeFromSubscriptions();\r\n  }\r\n\r\n  /**\r\n   * Takes a snapshot of the current webcam's view and emits the image as an event\r\n   */\r\n  public takeSnapshot(): void {\r\n    // set canvas size to actual video size\r\n    const _video = this.nativeVideoElement;\r\n    const dimensions = {width: this.width, height: this.height};\r\n    if (_video.videoWidth) {\r\n      dimensions.width = _video.videoWidth;\r\n      dimensions.height = _video.videoHeight;\r\n    }\r\n\r\n    const _canvas = this.canvas.nativeElement;\r\n    _canvas.width = dimensions.width;\r\n    _canvas.height = dimensions.height;\r\n\r\n    // paint snapshot image to canvas\r\n    const context2d = _canvas.getContext('2d');\r\n    context2d.drawImage(_video, 0, 0);\r\n\r\n    // read canvas content as image\r\n    const mimeType: string = this.imageType ? this.imageType : WebcamComponent.DEFAULT_IMAGE_TYPE;\r\n    const quality: number = this.imageQuality ? this.imageQuality : WebcamComponent.DEFAULT_IMAGE_QUALITY;\r\n    const dataUrl: string = _canvas.toDataURL(mimeType, quality);\r\n\r\n    // get the ImageData object from the canvas' context.\r\n    let imageData: ImageData = null;\r\n\r\n    if (this.captureImageData) {\r\n      imageData = context2d.getImageData(0, 0, _canvas.width, _canvas.height);\r\n    }\r\n\r\n    this.imageCapture.next(new WebcamImage(dataUrl, mimeType, imageData));\r\n  }\r\n\r\n  /**\r\n   * Switches to the next/previous video device\r\n   * @param forward\r\n   */\r\n  public rotateVideoInput(forward: boolean) {\r\n    if (this.availableVideoInputs && this.availableVideoInputs.length > 1) {\r\n      const increment: number = forward ? 1 : (this.availableVideoInputs.length - 1);\r\n      const nextInputIndex = (this.activeVideoInputIndex + increment) % this.availableVideoInputs.length;\r\n      this.switchToVideoInput(this.availableVideoInputs[nextInputIndex].deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switches the camera-view to the specified video device\r\n   */\r\n  public switchToVideoInput(deviceId: string): void {\r\n    this.videoInitialized = false;\r\n    this.stopMediaTracks();\r\n    this.initWebcam(deviceId, this.videoOptions);\r\n  }\r\n\r\n\r\n  /**\r\n   * Event-handler for video resize event.\r\n   * Triggers Angular change detection so that new video dimensions get applied\r\n   */\r\n  public videoResize(): void {\r\n    // here to trigger Angular change detection\r\n  }\r\n\r\n  public get videoWidth() {\r\n    const videoRatio = this.getVideoAspectRatio();\r\n    return Math.min(this.width, this.height * videoRatio);\r\n  }\r\n\r\n  public get videoHeight() {\r\n    const videoRatio = this.getVideoAspectRatio();\r\n    return Math.min(this.height, this.width / videoRatio);\r\n  }\r\n\r\n  public get videoStyleClasses() {\r\n    let classes: string = '';\r\n\r\n    if (this.isMirrorImage()) {\r\n      classes += 'mirrored ';\r\n    }\r\n\r\n    return classes.trim();\r\n  }\r\n\r\n  public get nativeVideoElement() {\r\n    return this.video.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Returns the video aspect ratio of the active video stream\r\n   */\r\n  private getVideoAspectRatio(): number {\r\n    // calculate ratio from video element dimensions if present\r\n    const videoElement = this.nativeVideoElement;\r\n    if (videoElement.videoWidth && videoElement.videoWidth > 0 &&\r\n      videoElement.videoHeight && videoElement.videoHeight > 0) {\r\n\r\n      return videoElement.videoWidth / videoElement.videoHeight;\r\n    }\r\n\r\n    // nothing present - calculate ratio based on width/height params\r\n    return this.width / this.height;\r\n  }\r\n\r\n  /**\r\n   * Init webcam live view\r\n   */\r\n  private initWebcam(deviceId: string, userVideoTrackConstraints: MediaTrackConstraints) {\r\n    const _video = this.nativeVideoElement;\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\r\n      // merge deviceId -> userVideoTrackConstraints\r\n      const videoTrackConstraints = WebcamComponent.getMediaConstraintsForDevice(deviceId, userVideoTrackConstraints);\r\n\r\n      navigator.mediaDevices.getUserMedia(<MediaStreamConstraints>{video: videoTrackConstraints})\r\n        .then((stream: MediaStream) => {\r\n          this.mediaStream = stream;\r\n          _video.srcObject = stream;\r\n          _video.play();\r\n\r\n          this.activeVideoSettings = stream.getVideoTracks()[0].getSettings();\r\n          const activeDeviceId: string = WebcamComponent.getDeviceIdFromMediaStreamTrack(stream.getVideoTracks()[0]);\r\n\r\n          this.cameraSwitched.next(activeDeviceId);\r\n\r\n          // Initial detect may run before user gave permissions, returning no deviceIds. This prevents later camera switches. (#47)\r\n          // Run detect once again within getUserMedia callback, to make sure this time we have permissions and get deviceIds.\r\n          this.detectAvailableDevices()\r\n            .then(() => {\r\n              this.activeVideoInputIndex = activeDeviceId ? this.availableVideoInputs\r\n                .findIndex((mediaDeviceInfo: MediaDeviceInfo) => mediaDeviceInfo.deviceId === activeDeviceId) : -1;\r\n              this.videoInitialized = true;\r\n            })\r\n            .catch(() => {\r\n              this.activeVideoInputIndex = -1;\r\n              this.videoInitialized = true;\r\n            });\r\n        })\r\n        .catch((err: MediaStreamError) => {\r\n          this.initError.next(<WebcamInitError>{message: err.message, mediaStreamError: err});\r\n        });\r\n    } else {\r\n      this.initError.next(<WebcamInitError>{message: 'Cannot read UserMedia from MediaDevices.'});\r\n    }\r\n  }\r\n\r\n  private getActiveVideoTrack(): MediaStreamTrack {\r\n    return this.mediaStream ? this.mediaStream.getVideoTracks()[0] : null;\r\n  }\r\n\r\n  private isMirrorImage(): boolean {\r\n    if (!this.getActiveVideoTrack()) {\r\n      return false;\r\n    }\r\n\r\n    // check for explicit mirror override parameter\r\n    {\r\n      let mirror: string = 'auto';\r\n      if (this.mirrorImage) {\r\n        if (typeof this.mirrorImage === 'string') {\r\n          mirror = String(this.mirrorImage).toLowerCase();\r\n        } else {\r\n          // WebcamMirrorProperties\r\n          if (this.mirrorImage.x) {\r\n            mirror = this.mirrorImage.x.toLowerCase();\r\n          }\r\n        }\r\n      }\r\n\r\n      switch (mirror) {\r\n        case 'always':\r\n          return true;\r\n        case 'never':\r\n          return false;\r\n      }\r\n    }\r\n\r\n    // default: enable mirroring if webcam is user facing\r\n    return WebcamComponent.isUserFacing(this.getActiveVideoTrack());\r\n  }\r\n\r\n  /**\r\n   * Stops all active media tracks.\r\n   * This prevents the webcam from being indicated as active,\r\n   * even if it is no longer used by this component.\r\n   */\r\n  private stopMediaTracks() {\r\n    if (this.mediaStream && this.mediaStream.getTracks) {\r\n      // getTracks() returns all media tracks (video+audio)\r\n      this.mediaStream.getTracks()\r\n        .forEach((track: MediaStreamTrack) => track.stop());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from all open subscriptions\r\n   */\r\n  private unsubscribeFromSubscriptions() {\r\n    if (this.triggerSubscription) {\r\n      this.triggerSubscription.unsubscribe();\r\n    }\r\n    if (this.switchCameraSubscription) {\r\n      this.switchCameraSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reads available input devices\r\n   */\r\n  private detectAvailableDevices(): Promise<MediaDeviceInfo[]> {\r\n    return new Promise((resolve, reject) => {\r\n      WebcamUtil.getAvailableVideoInputs()\r\n        .then((devices: MediaDeviceInfo[]) => {\r\n          this.availableVideoInputs = devices;\r\n          resolve(devices);\r\n        })\r\n        .catch(err => {\r\n          this.availableVideoInputs = [];\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {WebcamComponent} from './webcam/webcam.component';\n\nconst COMPONENTS = [\n  WebcamComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    COMPONENTS\n  ],\n  exports: [\n    COMPONENTS\n  ]\n})\nexport class WebcamModule {\n}\n","export class WebcamInitError {\r\n  public message: string = null;\r\n  public mediaStreamError: MediaStreamError = null;\r\n}\r\n","export class WebcamMirrorProperties {\r\n  public x: string;  // [\"auto\", \"always\", \"never\"]\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}