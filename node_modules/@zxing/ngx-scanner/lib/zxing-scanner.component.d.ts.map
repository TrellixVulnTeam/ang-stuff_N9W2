{"version":3,"file":"zxing-scanner.component.d.ts","sources":["zxing-scanner.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\r\nimport { BarcodeFormat, DecodeHintType, Exception, Result } from '@zxing/library';\r\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\r\nexport declare class ZXingScannerComponent implements OnInit, OnDestroy {\r\n    /**\r\n     * Supported Hints map.\r\n     */\r\n    private _hints;\r\n    /**\r\n     * The ZXing code reader.\r\n     */\r\n    private _codeReader;\r\n    /**\r\n     * The device that should be used to scan things.\r\n     */\r\n    private _device;\r\n    /**\r\n     * The device that should be used to scan things.\r\n     */\r\n    private _enabled;\r\n    /**\r\n     *\r\n     */\r\n    private _isAutostarting;\r\n    /**\r\n     * Has `navigator` access.\r\n     */\r\n    private hasNavigator;\r\n    /**\r\n     * Says if some native API is supported.\r\n     */\r\n    private isMediaDevicesSupported;\r\n    /**\r\n     * If the user-agent allowed the use of the camera or not.\r\n     */\r\n    private hasPermission;\r\n    /**\r\n     * Unsubscribe to stop scanning.\r\n     */\r\n    private _scanSubscription?;\r\n    /**\r\n     * Reference to the preview element, should be the `video` tag.\r\n     */\r\n    previewElemRef: ElementRef<HTMLVideoElement>;\r\n    /**\r\n     * Enable or disable autofocus of the camera (might have an impact on performance)\r\n     */\r\n    autofocusEnabled: boolean;\r\n    /**\r\n     * Delay between attempts to decode (default is 500ms)\r\n     */\r\n    timeBetweenScans: number;\r\n    /**\r\n     * Delay between successful decode (default is 500ms)\r\n     */\r\n    delayBetweenScanSuccess: number;\r\n    /**\r\n     * Emits when and if the scanner is autostarted.\r\n     */\r\n    autostarted: EventEmitter<void>;\r\n    /**\r\n     * True during autostart and false after. It will be null if won't autostart at all.\r\n     */\r\n    autostarting: EventEmitter<boolean>;\r\n    /**\r\n     * If the scanner should autostart with the first available device.\r\n     */\r\n    autostart: boolean;\r\n    /**\r\n     * How the preview element shoud be fit inside the :host container.\r\n     */\r\n    previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none';\r\n    /**\r\n     * Emitts events when the torch compatibility is changed.\r\n     */\r\n    torchCompatible: EventEmitter<boolean>;\r\n    /**\r\n     * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\r\n     */\r\n    scanSuccess: EventEmitter<string>;\r\n    /**\r\n     * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\r\n     */\r\n    scanFailure: EventEmitter<Exception | undefined>;\r\n    /**\r\n     * Emitts events when a scan throws some error, will inject the error to the callback.\r\n     */\r\n    scanError: EventEmitter<Error>;\r\n    /**\r\n     * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\r\n     */\r\n    scanComplete: EventEmitter<Result>;\r\n    /**\r\n     * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n     */\r\n    camerasFound: EventEmitter<MediaDeviceInfo[]>;\r\n    /**\r\n     * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n     */\r\n    camerasNotFound: EventEmitter<any>;\r\n    /**\r\n     * Emitts events when the users answers for permission.\r\n     */\r\n    permissionResponse: EventEmitter<boolean>;\r\n    /**\r\n     * Emitts events when has devices status is update.\r\n     */\r\n    hasDevices: EventEmitter<boolean>;\r\n    private _ready;\r\n    private _devicePreStart;\r\n    /**\r\n     * Exposes the current code reader, so the user can use it's APIs.\r\n     */\r\n    get codeReader(): BrowserMultiFormatContinuousReader;\r\n    /**\r\n     * User device input\r\n     */\r\n    set device(device: MediaDeviceInfo | undefined);\r\n    /**\r\n     * Emits when the current device is changed.\r\n     */\r\n    deviceChange: EventEmitter<MediaDeviceInfo>;\r\n    /**\r\n     * User device acessor.\r\n     */\r\n    get device(): MediaDeviceInfo | undefined;\r\n    /**\r\n     * Returns all the registered formats.\r\n     */\r\n    get formats(): BarcodeFormat[];\r\n    /**\r\n     * Registers formats the scanner should support.\r\n     *\r\n     * @param input BarcodeFormat or case-insensitive string array.\r\n     */\r\n    set formats(input: BarcodeFormat[]);\r\n    /**\r\n     * Returns all the registered hints.\r\n     */\r\n    get hints(): Map<DecodeHintType, any>;\r\n    /**\r\n     * Does what it takes to set the hints.\r\n     */\r\n    set hints(hints: Map<DecodeHintType, any>);\r\n    /**\r\n     * Sets the desired constraints in all video tracks.\r\n     * @experimental\r\n     */\r\n    set videoConstraints(constraints: MediaTrackConstraints);\r\n    /**\r\n     *\r\n     */\r\n    set isAutostarting(state: boolean);\r\n    /**\r\n     *\r\n     */\r\n    get isAutostarting(): boolean;\r\n    /**\r\n     * Can turn on/off the device flashlight.\r\n     *\r\n     * @experimental Torch/Flash APIs are not stable in all browsers, it may be buggy!\r\n     */\r\n    set torch(onOff: boolean);\r\n    /**\r\n     * Starts and Stops the scanning.\r\n     */\r\n    set enable(enabled: boolean);\r\n    /**\r\n     * Tells if the scanner is enabled or not.\r\n     */\r\n    get enabled(): boolean;\r\n    /**\r\n     * If is `tryHarder` enabled.\r\n     */\r\n    get tryHarder(): boolean;\r\n    /**\r\n     * Enable/disable tryHarder hint.\r\n     */\r\n    set tryHarder(enable: boolean);\r\n    /**\r\n     * Constructor to build the object and do some DI.\r\n     */\r\n    constructor();\r\n    /**\r\n     * Gets and registers all cammeras.\r\n     */\r\n    askForPermission(): Promise<boolean>;\r\n    /**\r\n     *\r\n     */\r\n    getAnyVideoDevice(): Promise<MediaStream>;\r\n    /**\r\n     * Terminates a stream and it's tracks.\r\n     */\r\n    private terminateStream;\r\n    private init;\r\n    /**\r\n     * Initializes the component without starting the scanner.\r\n     */\r\n    private initAutostartOff;\r\n    /**\r\n     * Initializes the component and starts the scanner.\r\n     * Permissions are asked to accomplish that.\r\n     */\r\n    private initAutostartOn;\r\n    /**\r\n     * Checks if the given device is the current defined one.\r\n     */\r\n    isCurrentDevice(device?: MediaDeviceInfo): boolean;\r\n    /**\r\n     * Executes some actions before destroy the component.\r\n     */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     *\r\n     */\r\n    ngOnInit(): void;\r\n    /**\r\n     * Stops the scanning, if any.\r\n     */\r\n    scanStop(): void;\r\n    /**\r\n     * Stops the scanning, if any.\r\n     */\r\n    scanStart(): void;\r\n    /**\r\n     * Stops old `codeReader` and starts scanning in a new one.\r\n     */\r\n    restart(): void;\r\n    /**\r\n     * Discovers and updates known video input devices.\r\n     */\r\n    updateVideoInputDevices(): Promise<MediaDeviceInfo[]>;\r\n    /**\r\n     * Starts the scanner with the back camera otherwise take the last\r\n     * available device.\r\n     */\r\n    private autostartScanner;\r\n    /**\r\n     * Dispatches the scan success event.\r\n     *\r\n     * @param result the scan result.\r\n     */\r\n    private dispatchScanSuccess;\r\n    /**\r\n     * Dispatches the scan failure event.\r\n     */\r\n    private dispatchScanFailure;\r\n    /**\r\n     * Dispatches the scan error event.\r\n     *\r\n     * @param error the error thing.\r\n     */\r\n    private dispatchScanError;\r\n    /**\r\n     * Dispatches the scan event.\r\n     *\r\n     * @param result the scan result.\r\n     */\r\n    private dispatchScanComplete;\r\n    /**\r\n     * Returns the filtered permission.\r\n     */\r\n    private handlePermissionException;\r\n    /**\r\n     * Returns a valid BarcodeFormat or fails.\r\n     */\r\n    private getBarcodeFormatOrFail;\r\n    /**\r\n     * Retorna um code reader, cria um se nenhume existe.\r\n     */\r\n    private getCodeReader;\r\n    /**\r\n     * Starts the continuous scanning for the given device.\r\n     *\r\n     * @param deviceId The deviceId from the device.\r\n     */\r\n    private scanFromDevice;\r\n    /**\r\n     * Handles decode errors.\r\n     */\r\n    private _onDecodeError;\r\n    /**\r\n     * Handles decode results.\r\n     */\r\n    private _onDecodeResult;\r\n    /**\r\n     * Stops the code reader and returns the previous selected device.\r\n     */\r\n    private _reset;\r\n    /**\r\n     * Resets the scanner and emits device change.\r\n     */\r\n    reset(): void;\r\n    /**\r\n     * Sets the current device.\r\n     */\r\n    private setDevice;\r\n    /**\r\n     * Sets the permission value and emmits the event.\r\n     */\r\n    private setPermission;\r\n}\r\n"]}