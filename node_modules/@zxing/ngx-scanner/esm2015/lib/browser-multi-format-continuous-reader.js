import { __awaiter } from "tslib";
import { ChecksumException, FormatException, NotFoundException } from '@zxing/library';
import { BrowserMultiFormatReader } from '@zxing/browser';
import { BehaviorSubject } from 'rxjs';
/**
 * Based on zxing-typescript BrowserCodeReader
 */
export class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {
    /**
     * Returns the code reader scanner controls.
     */
    getScannerControls() {
        if (!this.scannerControls) {
            throw new Error('No scanning is running at the time.');
        }
        return this.scannerControls;
    }
    /**
     * Starts the decoding from the current or a new video element.
     *
     * @param deviceId The device's to be used Id
     * @param previewEl A new video element
     */
    scanFromDeviceObservable(deviceId, previewEl) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const scan$ = new BehaviorSubject({});
            let ctrls;
            try {
                ctrls = yield this.decodeFromVideoDevice(deviceId, previewEl, (result, error) => {
                    if (!error) {
                        scan$.next({ result });
                        return;
                    }
                    const errorName = error.name;
                    // stream cannot stop on fails.
                    if (
                    // scan Failure - found nothing, no error
                    errorName === NotFoundException.name ||
                        // scan Error - found the QR but got error on decoding
                        errorName === ChecksumException.name ||
                        errorName === FormatException.name ||
                        error.message.includes('No MultiFormat Readers were able to detect the code.')) {
                        scan$.next({ error });
                        return;
                    }
                    // probably fatal error
                    scan$.error(error);
                    this.scannerControls.stop();
                    this.scannerControls = undefined;
                    return;
                });
                this.scannerControls = Object.assign(Object.assign({}, ctrls), { stop() {
                        ctrls.stop();
                        scan$.complete();
                    } });
            }
            catch (e) {
                scan$.error(e);
                (_a = this.scannerControls) === null || _a === void 0 ? void 0 : _a.stop();
                this.scannerControls = undefined;
            }
            return scan$.asObservable();
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1tdWx0aS1mb3JtYXQtY29udGludW91cy1yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvbHVpei5iYXJuaS9Qcm9qZWN0cy96eGluZy1qcy9uZ3gtc2Nhbm5lci9wcm9qZWN0cy96eGluZy1zY2FubmVyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9icm93c2VyLW11bHRpLWZvcm1hdC1jb250aW51b3VzLXJlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSx3QkFBd0IsRUFBb0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBR25EOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtDQUFtQyxTQUFRLHdCQUF3QjtJQVE5RTs7T0FFRztJQUNJLGtCQUFrQjtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7U0FDeEQ7UUFDRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ1Usd0JBQXdCLENBQ25DLFFBQWlCLEVBQ2pCLFNBQTRCOzs7WUFHNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxlQUFlLENBQWlCLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELElBQUksS0FBSyxDQUFBO1lBRVQsSUFBSTtnQkFDRixLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtvQkFFOUUsSUFBSSxDQUFDLEtBQUssRUFBRTt3QkFDVixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQzt3QkFDdkIsT0FBTztxQkFDUjtvQkFFRCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO29CQUU3QiwrQkFBK0I7b0JBQy9CO29CQUNFLHlDQUF5QztvQkFDekMsU0FBUyxLQUFLLGlCQUFpQixDQUFDLElBQUk7d0JBQ3BDLHNEQUFzRDt3QkFDdEQsU0FBUyxLQUFLLGlCQUFpQixDQUFDLElBQUk7d0JBQ3BDLFNBQVMsS0FBSyxlQUFlLENBQUMsSUFBSTt3QkFDbEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsc0RBQXNELENBQUMsRUFDOUU7d0JBQ0EsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7d0JBQ3RCLE9BQU87cUJBQ1I7b0JBRUQsdUJBQXVCO29CQUN2QixLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNuQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO29CQUM1QixJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztvQkFDakMsT0FBTztnQkFDVCxDQUFDLENBQUMsQ0FBQztnQkFFSCxJQUFJLENBQUMsZUFBZSxtQ0FDZixLQUFLLEtBQ1IsSUFBSTt3QkFDRixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7d0JBQ2IsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQUNuQixDQUFDLEdBQ0YsQ0FBQzthQUNIO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDZixNQUFBLElBQUksQ0FBQyxlQUFlLDBDQUFFLElBQUksR0FBRztnQkFDN0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7YUFDbEM7WUFFRCxPQUFPLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7S0FDN0I7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoZWNrc3VtRXhjZXB0aW9uLCBGb3JtYXRFeGNlcHRpb24sIE5vdEZvdW5kRXhjZXB0aW9uIH0gZnJvbSAnQHp4aW5nL2xpYnJhcnknO1xyXG5pbXBvcnQgeyBCcm93c2VyTXVsdGlGb3JtYXRSZWFkZXIsIElTY2FubmVyQ29udHJvbHMgfSBmcm9tICdAenhpbmcvYnJvd3Nlcic7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBSZXN1bHRBbmRFcnJvciB9IGZyb20gJy4vUmVzdWx0QW5kRXJyb3InO1xyXG5cclxuLyoqXHJcbiAqIEJhc2VkIG9uIHp4aW5nLXR5cGVzY3JpcHQgQnJvd3NlckNvZGVSZWFkZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCcm93c2VyTXVsdGlGb3JtYXRDb250aW51b3VzUmVhZGVyIGV4dGVuZHMgQnJvd3Nlck11bHRpRm9ybWF0UmVhZGVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIHRvIGNhbGwgc2Nhbm5lciBjb250cm9scyBBUEkgd2hpbGUgc2Nhbm5pbmcuXHJcbiAgICogV2lsbCBiZSB1bmRlZmluZWQgaWYgbm8gc2Nhbm5pbmcgaXMgcnVubmlnLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzY2FubmVyQ29udHJvbHM6IElTY2FubmVyQ29udHJvbHM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGNvZGUgcmVhZGVyIHNjYW5uZXIgY29udHJvbHMuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFNjYW5uZXJDb250cm9scygpOiBJU2Nhbm5lckNvbnRyb2xzIHtcclxuICAgIGlmICghdGhpcy5zY2FubmVyQ29udHJvbHMpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzY2FubmluZyBpcyBydW5uaW5nIGF0IHRoZSB0aW1lLicpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuc2Nhbm5lckNvbnRyb2xzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIHRoZSBkZWNvZGluZyBmcm9tIHRoZSBjdXJyZW50IG9yIGEgbmV3IHZpZGVvIGVsZW1lbnQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZGV2aWNlSWQgVGhlIGRldmljZSdzIHRvIGJlIHVzZWQgSWRcclxuICAgKiBAcGFyYW0gcHJldmlld0VsIEEgbmV3IHZpZGVvIGVsZW1lbnRcclxuICAgKi9cclxuICBwdWJsaWMgYXN5bmMgc2NhbkZyb21EZXZpY2VPYnNlcnZhYmxlKFxyXG4gICAgZGV2aWNlSWQ/OiBzdHJpbmcsXHJcbiAgICBwcmV2aWV3RWw/OiBIVE1MVmlkZW9FbGVtZW50XHJcbiAgKTogUHJvbWlzZTxPYnNlcnZhYmxlPFJlc3VsdEFuZEVycm9yPj4ge1xyXG5cclxuICAgIGNvbnN0IHNjYW4kID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSZXN1bHRBbmRFcnJvcj4oe30pO1xyXG4gICAgbGV0IGN0cmxzXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY3RybHMgPSBhd2FpdCB0aGlzLmRlY29kZUZyb21WaWRlb0RldmljZShkZXZpY2VJZCwgcHJldmlld0VsLCAocmVzdWx0LCBlcnJvcikgPT4ge1xyXG5cclxuICAgICAgICBpZiAoIWVycm9yKSB7XHJcbiAgICAgICAgICBzY2FuJC5uZXh0KHsgcmVzdWx0IH0pO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZXJyb3JOYW1lID0gZXJyb3IubmFtZTtcclxuXHJcbiAgICAgICAgLy8gc3RyZWFtIGNhbm5vdCBzdG9wIG9uIGZhaWxzLlxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIC8vIHNjYW4gRmFpbHVyZSAtIGZvdW5kIG5vdGhpbmcsIG5vIGVycm9yXHJcbiAgICAgICAgICBlcnJvck5hbWUgPT09IE5vdEZvdW5kRXhjZXB0aW9uLm5hbWUgfHxcclxuICAgICAgICAgIC8vIHNjYW4gRXJyb3IgLSBmb3VuZCB0aGUgUVIgYnV0IGdvdCBlcnJvciBvbiBkZWNvZGluZ1xyXG4gICAgICAgICAgZXJyb3JOYW1lID09PSBDaGVja3N1bUV4Y2VwdGlvbi5uYW1lIHx8XHJcbiAgICAgICAgICBlcnJvck5hbWUgPT09IEZvcm1hdEV4Y2VwdGlvbi5uYW1lIHx8IFxyXG4gICAgICAgICAgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnTm8gTXVsdGlGb3JtYXQgUmVhZGVycyB3ZXJlIGFibGUgdG8gZGV0ZWN0IHRoZSBjb2RlLicpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBzY2FuJC5uZXh0KHsgZXJyb3IgfSk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcm9iYWJseSBmYXRhbCBlcnJvclxyXG4gICAgICAgIHNjYW4kLmVycm9yKGVycm9yKTtcclxuICAgICAgICB0aGlzLnNjYW5uZXJDb250cm9scy5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5zY2FubmVyQ29udHJvbHMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuc2Nhbm5lckNvbnRyb2xzID0ge1xyXG4gICAgICAgIC4uLmN0cmxzLFxyXG4gICAgICAgIHN0b3AoKSB7XHJcbiAgICAgICAgICBjdHJscy5zdG9wKCk7XHJcbiAgICAgICAgICBzY2FuJC5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHNjYW4kLmVycm9yKGUpO1xyXG4gICAgICB0aGlzLnNjYW5uZXJDb250cm9scz8uc3RvcCgpO1xyXG4gICAgICB0aGlzLnNjYW5uZXJDb250cm9scyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2NhbiQuYXNPYnNlcnZhYmxlKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==