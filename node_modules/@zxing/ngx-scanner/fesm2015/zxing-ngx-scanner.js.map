{"version":3,"file":"zxing-ngx-scanner.js","sources":["../../../projects/zxing-scanner/src/lib/browser-multi-format-continuous-reader.ts","../../../projects/zxing-scanner/src/lib/zxing-scanner.component.ts","../../../projects/zxing-scanner/src/lib/zxing-scanner.module.ts","../../../projects/zxing-scanner/src/public_api.ts","../../../projects/zxing-scanner/src/zxing-ngx-scanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChecksumException, FormatException, NotFoundException } from '@zxing/library';\r\nimport { BrowserMultiFormatReader, IScannerControls } from '@zxing/browser';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n/**\r\n * Based on zxing-typescript BrowserCodeReader\r\n */\r\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\r\n\r\n  /**\r\n   * Allows to call scanner controls API while scanning.\r\n   * Will be undefined if no scanning is runnig.\r\n   */\r\n  protected scannerControls: IScannerControls;\r\n\r\n  /**\r\n   * Returns the code reader scanner controls.\r\n   */\r\n  public getScannerControls(): IScannerControls {\r\n    if (!this.scannerControls) {\r\n      throw new Error('No scanning is running at the time.');\r\n    }\r\n    return this.scannerControls;\r\n  }\r\n\r\n  /**\r\n   * Starts the decoding from the current or a new video element.\r\n   *\r\n   * @param deviceId The device's to be used Id\r\n   * @param previewEl A new video element\r\n   */\r\n  public async scanFromDeviceObservable(\r\n    deviceId?: string,\r\n    previewEl?: HTMLVideoElement\r\n  ): Promise<Observable<ResultAndError>> {\r\n\r\n    const scan$ = new BehaviorSubject<ResultAndError>({});\r\n    let ctrls\r\n\r\n    try {\r\n      ctrls = await this.decodeFromVideoDevice(deviceId, previewEl, (result, error) => {\r\n\r\n        if (!error) {\r\n          scan$.next({ result });\r\n          return;\r\n        }\r\n\r\n        const errorName = error.name;\r\n\r\n        // stream cannot stop on fails.\r\n        if (\r\n          // scan Failure - found nothing, no error\r\n          errorName === NotFoundException.name ||\r\n          // scan Error - found the QR but got error on decoding\r\n          errorName === ChecksumException.name ||\r\n          errorName === FormatException.name || \r\n          error.message.includes('No MultiFormat Readers were able to detect the code.')\r\n        ) {\r\n          scan$.next({ error });\r\n          return;\r\n        }\r\n\r\n        // probably fatal error\r\n        scan$.error(error);\r\n        this.scannerControls.stop();\r\n        this.scannerControls = undefined;\r\n        return;\r\n      });\r\n\r\n      this.scannerControls = {\r\n        ...ctrls,\r\n        stop() {\r\n          ctrls.stop();\r\n          scan$.complete();\r\n        },\r\n      };\r\n    } catch (e) {\r\n      scan$.error(e);\r\n      this.scannerControls?.stop();\r\n      this.scannerControls = undefined;\r\n    }\r\n\r\n    return scan$.asObservable();\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { BrowserCodeReader } from '@zxing/browser';\r\nimport {\r\n  BarcodeFormat,\r\n  DecodeHintType,\r\n  Exception,\r\n  Result\r\n} from '@zxing/library';\r\nimport { Subscription } from 'rxjs';\r\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n\r\n@Component({\r\n  selector: 'zxing-scanner',\r\n  templateUrl: './zxing-scanner.component.html',\r\n  styleUrls: ['./zxing-scanner.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ZXingScannerComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Supported Hints map.\r\n   */\r\n  private _hints: Map<DecodeHintType, any> | null;\r\n\r\n  /**\r\n   * The ZXing code reader.\r\n   */\r\n  private _codeReader: BrowserMultiFormatContinuousReader;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _device: MediaDeviceInfo;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _enabled: boolean;\r\n\r\n  /**\r\n   *\r\n   */\r\n  private _isAutostarting: boolean;\r\n\r\n  /**\r\n   * Has `navigator` access.\r\n   */\r\n  private hasNavigator: boolean;\r\n\r\n  /**\r\n   * Says if some native API is supported.\r\n   */\r\n  private isMediaDevicesSupported: boolean;\r\n\r\n  /**\r\n   * If the user-agent allowed the use of the camera or not.\r\n   */\r\n  private hasPermission: boolean | null;\r\n\r\n  /**\r\n   * Unsubscribe to stop scanning.\r\n   */\r\n  private _scanSubscription?: Subscription;\r\n\r\n  /**\r\n   * Reference to the preview element, should be the `video` tag.\r\n   */\r\n  @ViewChild('preview', { static: true })\r\n  previewElemRef: ElementRef<HTMLVideoElement>;\r\n\r\n  /**\r\n   * Enable or disable autofocus of the camera (might have an impact on performance)\r\n   */\r\n  @Input()\r\n  autofocusEnabled: boolean;\r\n\r\n  /**\r\n   * Delay between attempts to decode (default is 500ms)\r\n   */\r\n  @Input()\r\n  timeBetweenScans = 500;\r\n\r\n  /**\r\n   * Delay between successful decode (default is 500ms)\r\n   */\r\n  @Input()\r\n  delayBetweenScanSuccess = 500;\r\n\r\n  /**\r\n   * Emits when and if the scanner is autostarted.\r\n   */\r\n  @Output()\r\n  autostarted: EventEmitter<void>;\r\n\r\n  /**\r\n   * True during autostart and false after. It will be null if won't autostart at all.\r\n   */\r\n  @Output()\r\n  autostarting: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * If the scanner should autostart with the first available device.\r\n   */\r\n  @Input()\r\n  autostart: boolean;\r\n\r\n  /**\r\n   * How the preview element shoud be fit inside the :host container.\r\n   */\r\n  @Input()\r\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\r\n\r\n  /**\r\n   * Emitts events when the torch compatibility is changed.\r\n   */\r\n  @Output()\r\n  torchCompatible: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\r\n   */\r\n  @Output()\r\n  scanSuccess: EventEmitter<string>;\r\n\r\n  /**\r\n   * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\r\n   */\r\n  @Output()\r\n  scanFailure: EventEmitter<Exception | undefined>;\r\n\r\n  /**\r\n   * Emitts events when a scan throws some error, will inject the error to the callback.\r\n   */\r\n  @Output()\r\n  scanError: EventEmitter<Error>;\r\n\r\n  /**\r\n   * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\r\n   */\r\n  @Output()\r\n  scanComplete: EventEmitter<Result>;\r\n\r\n  /**\r\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\r\n\r\n  /**\r\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasNotFound: EventEmitter<any>;\r\n\r\n  /**\r\n   * Emitts events when the users answers for permission.\r\n   */\r\n  @Output()\r\n  permissionResponse: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emitts events when has devices status is update.\r\n   */\r\n  @Output()\r\n  hasDevices: EventEmitter<boolean>;\r\n\r\n  private _ready = false;\r\n\r\n  private _devicePreStart: MediaDeviceInfo;\r\n\r\n  /**\r\n   * Exposes the current code reader, so the user can use it's APIs.\r\n   */\r\n  get codeReader(): BrowserMultiFormatContinuousReader {\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * User device input\r\n   */\r\n  @Input()\r\n  set device(device: MediaDeviceInfo | undefined) {\r\n\r\n    if (!this._ready) {\r\n      this._devicePreStart = device;\r\n      // let's ignore silently, users don't liek logs\r\n      return;\r\n    }\r\n\r\n    if (this.isAutostarting) {\r\n      // do not allow setting devices during auto-start, since it will set one and emit it.\r\n      console.warn('Avoid setting a device during auto-start.');\r\n      return;\r\n    }\r\n\r\n    if (this.isCurrentDevice(device)) {\r\n      console.warn('Setting the same device is not allowed.');\r\n      return;\r\n    }\r\n\r\n    if (!this.hasPermission) {\r\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\r\n      // this.permissionResponse\r\n      //   .pipe(\r\n      //     take(1),\r\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\r\n      //   )\r\n      //   .subscribe(() => this.device = device);\r\n      return;\r\n    }\r\n\r\n    this.setDevice(device);\r\n  }\r\n\r\n  /**\r\n   * Emits when the current device is changed.\r\n   */\r\n  @Output()\r\n  deviceChange: EventEmitter<MediaDeviceInfo>;\r\n\r\n  /**\r\n   * User device acessor.\r\n   */\r\n  get device() {\r\n    return this._device;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered formats.\r\n   */\r\n  get formats(): BarcodeFormat[] {\r\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\r\n  }\r\n\r\n  /**\r\n   * Registers formats the scanner should support.\r\n   *\r\n   * @param input BarcodeFormat or case-insensitive string array.\r\n   */\r\n  @Input()\r\n  set formats(input: BarcodeFormat[]) {\r\n\r\n    if (typeof input === 'string') {\r\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\r\n    }\r\n\r\n    // formats may be set from html template as BarcodeFormat or string array\r\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\r\n\r\n    const hints = this.hints;\r\n\r\n    // updates the hints\r\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n\r\n    // handles updating the codeReader\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered hints.\r\n   */\r\n  get hints() {\r\n    return this._hints;\r\n  }\r\n\r\n  /**\r\n   * Does what it takes to set the hints.\r\n   */\r\n  set hints(hints: Map<DecodeHintType, any>) {\r\n    this._hints = hints;\r\n    // new instance with new hints.\r\n    this.codeReader?.setHints(this._hints);\r\n  }\r\n\r\n  /**\r\n   * Sets the desired constraints in all video tracks.\r\n   * @experimental\r\n   */\r\n  @Input()\r\n  set videoConstraints(constraints: MediaTrackConstraints) {\r\n    // new instance with new hints.\r\n    const controls = this.codeReader?.getScannerControls();\r\n\r\n    if (!controls) {\r\n      // fails silently\r\n      return;\r\n    }\r\n\r\n    controls?.streamVideoConstraintsApply(constraints);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  set isAutostarting(state: boolean) {\r\n    this._isAutostarting = state;\r\n    this.autostarting.next(state);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  get isAutostarting(): boolean {\r\n    return this._isAutostarting;\r\n  }\r\n\r\n  /**\r\n   * Can turn on/off the device flashlight.\r\n   *\r\n   * @experimental Torch/Flash APIs are not stable in all browsers, it may be buggy!\r\n   */\r\n  @Input()\r\n  set torch(onOff: boolean) {\r\n    try {\r\n      const controls = this.getCodeReader().getScannerControls();\r\n      controls.switchTorch(onOff);\r\n    } catch (error) {\r\n      // ignore error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts and Stops the scanning.\r\n   */\r\n  @Input()\r\n  set enable(enabled: boolean) {\r\n\r\n    this._enabled = Boolean(enabled);\r\n\r\n    if (!this._enabled) {\r\n      this.reset();\r\n    } else {\r\n      if (this.device) {\r\n        this.scanFromDevice(this.device.deviceId);\r\n      } else {\r\n        this.init();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells if the scanner is enabled or not.\r\n   */\r\n  get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  /**\r\n   * If is `tryHarder` enabled.\r\n   */\r\n  get tryHarder(): boolean {\r\n    return this.hints.get(DecodeHintType.TRY_HARDER);\r\n  }\r\n\r\n  /**\r\n   * Enable/disable tryHarder hint.\r\n   */\r\n  @Input()\r\n  set tryHarder(enable: boolean) {\r\n\r\n    const hints = this.hints;\r\n\r\n    if (enable) {\r\n      hints.set(DecodeHintType.TRY_HARDER, true);\r\n    } else {\r\n      hints.delete(DecodeHintType.TRY_HARDER);\r\n    }\r\n\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Constructor to build the object and do some DI.\r\n   */\r\n  constructor() {\r\n    // instance based emitters\r\n    this.autostarted = new EventEmitter();\r\n    this.autostarting = new EventEmitter();\r\n    this.torchCompatible = new EventEmitter(false);\r\n    this.scanSuccess = new EventEmitter();\r\n    this.scanFailure = new EventEmitter();\r\n    this.scanError = new EventEmitter();\r\n    this.scanComplete = new EventEmitter();\r\n    this.camerasFound = new EventEmitter();\r\n    this.camerasNotFound = new EventEmitter();\r\n    this.permissionResponse = new EventEmitter(true);\r\n    this.hasDevices = new EventEmitter();\r\n    this.deviceChange = new EventEmitter();\r\n\r\n    this._enabled = true;\r\n    this._hints = new Map<DecodeHintType, any>();\r\n    this.autofocusEnabled = true;\r\n    this.autostart = true;\r\n    this.formats = [BarcodeFormat.QR_CODE];\r\n\r\n    // computed data\r\n    this.hasNavigator = typeof navigator !== 'undefined';\r\n    this.isMediaDevicesSupported = this.hasNavigator && !!navigator.mediaDevices;\r\n  }\r\n\r\n  /**\r\n   * Gets and registers all cammeras.\r\n   */\r\n  async askForPermission(): Promise<boolean> {\r\n\r\n    if (!this.hasNavigator) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    if (!this.isMediaDevicesSupported) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    let stream: MediaStream;\r\n    let permission: boolean;\r\n\r\n    try {\r\n      // Will try to ask for permission\r\n      stream = await this.getAnyVideoDevice();\r\n      permission = !!stream;\r\n    } catch (err) {\r\n      return this.handlePermissionException(err);\r\n    } finally {\r\n      this.terminateStream(stream);\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // Returns the permission\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  getAnyVideoDevice(): Promise<MediaStream> {\r\n    return navigator.mediaDevices.getUserMedia({ video: true });\r\n  }\r\n\r\n  /**\r\n   * Terminates a stream and it's tracks.\r\n   */\r\n  private terminateStream(stream: MediaStream) {\r\n\r\n    if (stream) {\r\n      stream.getTracks().forEach(t => t.stop());\r\n    }\r\n\r\n    stream = undefined;\r\n  }\r\n\r\n  private async init() {\r\n    if (!this.autostart) {\r\n      console.warn('Feature \\'autostart\\' disabled. Permissions and devices recovery has to be run manually.');\r\n\r\n      // does the necessary configuration without autostarting\r\n      this.initAutostartOff();\r\n\r\n      this._ready = true;\r\n\r\n      return;\r\n    }\r\n\r\n    // configurates the component and starts the scanner\r\n    await this.initAutostartOn();\r\n\r\n    this._ready = true;\r\n  }\r\n\r\n  /**\r\n   * Initializes the component without starting the scanner.\r\n   */\r\n  private initAutostartOff(): void {\r\n\r\n    // do not ask for permission when autostart is off\r\n    this.isAutostarting = false;\r\n\r\n    // just update devices information\r\n    this.updateVideoInputDevices();\r\n\r\n    if (this._device && this._devicePreStart) {\r\n      this.setDevice(this._devicePreStart);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and starts the scanner.\r\n   * Permissions are asked to accomplish that.\r\n   */\r\n  private async initAutostartOn(): Promise<void> {\r\n\r\n    this.isAutostarting = true;\r\n\r\n    let hasPermission: boolean;\r\n\r\n    try {\r\n      // Asks for permission before enumerating devices so it can get all the device's info\r\n      hasPermission = await this.askForPermission();\r\n    } catch (e) {\r\n      console.error('Exception occurred while asking for permission:', e);\r\n      return;\r\n    }\r\n\r\n    // from this point, things gonna need permissions\r\n    if (hasPermission) {\r\n      const devices = await this.updateVideoInputDevices();\r\n      await this.autostartScanner([...devices]);\r\n    }\r\n\r\n    this.isAutostarting = false;\r\n    this.autostarted.next();\r\n  }\r\n\r\n  /**\r\n   * Checks if the given device is the current defined one.\r\n   */\r\n  isCurrentDevice(device?: MediaDeviceInfo) {\r\n    return device?.deviceId === this._device?.deviceId;\r\n  }\r\n\r\n  /**\r\n   * Executes some actions before destroy the component.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  ngOnInit(): void {\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Stops the scanning, if any.\r\n   */\r\n  public scanStop() {\r\n    if (this._scanSubscription) {\r\n      this.codeReader?.getScannerControls().stop();\r\n      this._scanSubscription?.unsubscribe();\r\n      this._scanSubscription = undefined;\r\n    }\r\n    this.torchCompatible.next(false);\r\n  }\r\n\r\n  /**\r\n   * Stops the scanning, if any.\r\n   */\r\n  public scanStart() {\r\n\r\n    if (this._scanSubscription) {\r\n      throw new Error('There is already a scan proccess running.');\r\n    }\r\n\r\n    if (!this._device) {\r\n      throw new Error('No device defined, cannot start scan, please define a device.');\r\n    }\r\n\r\n    this.scanFromDevice(this._device.deviceId);\r\n  }\r\n\r\n  /**\r\n   * Stops old `codeReader` and starts scanning in a new one.\r\n   */\r\n  restart(): void {\r\n    // @note apenas necessario por enquanto causa da Torch\r\n    this._codeReader = undefined;\r\n\r\n    const prevDevice = this._reset();\r\n\r\n    if (!prevDevice) {\r\n      return;\r\n    }\r\n\r\n    this.device = prevDevice;\r\n  }\r\n\r\n  /**\r\n   * Discovers and updates known video input devices.\r\n   */\r\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\r\n\r\n    // permissions aren't needed to get devices, but to access them and their info\r\n    const devices = await BrowserCodeReader.listVideoInputDevices() || [];\r\n    const hasDevices = devices && devices.length > 0;\r\n\r\n    // stores discovered devices and updates information\r\n    this.hasDevices.next(hasDevices);\r\n    this.camerasFound.next([...devices]);\r\n\r\n    if (!hasDevices) {\r\n      this.camerasNotFound.next();\r\n    }\r\n\r\n    return devices;\r\n  }\r\n\r\n  /**\r\n   * Starts the scanner with the back camera otherwise take the last\r\n   * available device.\r\n   */\r\n  private async autostartScanner(devices: MediaDeviceInfo[]): Promise<void> {\r\n\r\n    const matcher = ({ label }) => /back|trás|rear|traseira|environment|ambiente/gi.test(label);\r\n\r\n    // select the rear camera by default, otherwise take the last camera.\r\n    const device = devices.find(matcher) || devices.pop();\r\n\r\n    if (!device) {\r\n      throw new Error('Impossible to autostart, no input devices available.');\r\n    }\r\n\r\n    await this.setDevice(device);\r\n\r\n    this.deviceChange.next(device);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan success event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanSuccess(result: Result): void {\r\n    this.scanSuccess.next(result.getText());\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan failure event.\r\n   */\r\n  private dispatchScanFailure(reason?: Exception): void {\r\n    this.scanFailure.next(reason);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan error event.\r\n   *\r\n   * @param error the error thing.\r\n   */\r\n  private dispatchScanError(error: any): void {\r\n    if (!this.scanError.observers.some(x => Boolean(x))) {\r\n      console.error(`zxing scanner component: ${error.name}`, error);\r\n      console.warn('Use the `(scanError)` property to handle errors like this!');\r\n    }\r\n    this.scanError.next(error);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanComplete(result: Result): void {\r\n    this.scanComplete.next(result);\r\n  }\r\n\r\n  /**\r\n   * Returns the filtered permission.\r\n   */\r\n  private handlePermissionException(err: DOMException): boolean {\r\n\r\n    // failed to grant permission to video input\r\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\r\n\r\n    let permission: boolean;\r\n\r\n    switch (err.name) {\r\n\r\n      // usually caused by not secure origins\r\n      case 'NotSupportedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // could not claim\r\n        permission = null;\r\n        // can't check devices\r\n        this.hasDevices.next(null);\r\n        break;\r\n\r\n      // user denied permission\r\n      case 'NotAllowedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // claimed and denied permission\r\n        permission = false;\r\n        // this means that input devices exists\r\n        this.hasDevices.next(true);\r\n        break;\r\n\r\n      // the device has no attached input devices\r\n      case 'NotFoundError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // no permissions claimed\r\n        permission = null;\r\n        // because there was no devices\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      case 'NotReadableError':\r\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\r\n        // no permissions claimed\r\n        permission = null;\r\n        // there are devices, which I couldn't use\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      default:\r\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\r\n        // unknown\r\n        permission = null;\r\n        // this.hasDevices.next(undefined;\r\n        break;\r\n\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // tells the listener about the error\r\n    this.permissionResponse.error(err);\r\n\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   * Returns a valid BarcodeFormat or fails.\r\n   */\r\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\r\n    return typeof format === 'string'\r\n      ? BarcodeFormat[format.trim().toUpperCase()]\r\n      : format;\r\n  }\r\n\r\n  /**\r\n   * Retorna um code reader, cria um se nenhume existe.\r\n   */\r\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\r\n\r\n    if (!this._codeReader) {\r\n      const options = {\r\n        delayBetweenScanAttempts: this.timeBetweenScans,\r\n        delayBetweenScanSuccess: this.delayBetweenScanSuccess,\r\n      };\r\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints, options);\r\n    }\r\n\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * Starts the continuous scanning for the given device.\r\n   *\r\n   * @param deviceId The deviceId from the device.\r\n   */\r\n  private async scanFromDevice(deviceId: string): Promise<void> {\r\n\r\n    const videoElement = this.previewElemRef.nativeElement;\r\n\r\n    const codeReader = this.getCodeReader();\r\n\r\n    const scanStream = await codeReader.scanFromDeviceObservable(deviceId, videoElement);\r\n\r\n    if (!scanStream) {\r\n      throw new Error('Undefined decoding stream, aborting.');\r\n    }\r\n\r\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\r\n    const error = (err: any) => this._onDecodeError(err);\r\n    const complete = () => { };\r\n\r\n    this._scanSubscription = scanStream.subscribe(next, error, complete);\r\n\r\n    if (this._scanSubscription.closed) {\r\n      return;\r\n    }\r\n\r\n    const controls = codeReader.getScannerControls();\r\n    const hasTorchControl = typeof controls.switchTorch !== 'undefined';\r\n\r\n    this.torchCompatible.next(hasTorchControl);\r\n  }\r\n\r\n  /**\r\n   * Handles decode errors.\r\n   */\r\n  private _onDecodeError(err: any) {\r\n    this.dispatchScanError(err);\r\n    // this.reset();\r\n  }\r\n\r\n  /**\r\n   * Handles decode results.\r\n   */\r\n  private _onDecodeResult(result: Result, error: Exception): void {\r\n\r\n    if (result) {\r\n      this.dispatchScanSuccess(result);\r\n    } else {\r\n      this.dispatchScanFailure(error);\r\n    }\r\n\r\n    this.dispatchScanComplete(result);\r\n  }\r\n\r\n  /**\r\n   * Stops the code reader and returns the previous selected device.\r\n   */\r\n  private _reset(): MediaDeviceInfo {\r\n\r\n    if (!this._codeReader) {\r\n      return;\r\n    }\r\n\r\n    const device = this._device;\r\n    // do not set this.device inside this method, it would create a recursive loop\r\n    this.device = undefined;\r\n\r\n    this._codeReader = undefined;\r\n\r\n    return device;\r\n  }\r\n\r\n  /**\r\n   * Resets the scanner and emits device change.\r\n   */\r\n  public reset(): void {\r\n    this._reset();\r\n    this.deviceChange.emit(null);\r\n  }\r\n\r\n  /**\r\n   * Sets the current device.\r\n   */\r\n  private async setDevice(device: MediaDeviceInfo): Promise<void> {\r\n\r\n    // instantly stops the scan before changing devices\r\n    this.scanStop();\r\n\r\n    // correctly sets the new (or none) device\r\n    this._device = device || undefined;\r\n\r\n    if (!this._device) {\r\n      // cleans the video because user removed the device\r\n      BrowserCodeReader.cleanVideoSource(this.previewElemRef.nativeElement);\r\n    }\r\n\r\n    // if enabled, starts scanning\r\n    if (this._enabled && device) {\r\n      await this.scanFromDevice(device.deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the permission value and emmits the event.\r\n   */\r\n  private setPermission(hasPermission: boolean | null): void {\r\n    this.hasPermission = hasPermission;\r\n    this.permissionResponse.next(hasPermission);\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ZXingScannerComponent } from './zxing-scanner.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ZXingScannerComponent],\r\n  exports: [ZXingScannerComponent],\r\n})\r\nexport class ZXingScannerModule { }\r\n","/*\r\n * Public API Surface of zxing-scanner\r\n */\r\n\r\nexport * from './lib/zxing-scanner.module';\r\nexport * from './lib/zxing-scanner.component';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}